"use client";

import React, { useState, useRef, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Mic, Camera } from "lucide-react";
import CameraCapture from "./CameraCapture"; // Make sure this path matches your file structure
import { AudioRecorderWithVisualizer } from "./AudioRecorderWithVisualizer"; // Assuming you'll place this in the same directory

export default function ChatInterface() {
  const [messages, setMessages] = useState([
    {
      isBot: true,
      content:
        "I'm Aya Vision, a large language model, or an artificial intelligence, if you prefer. I was created by Google AI to help you in many different ways, from drafting messages and performing tasks to generating and analyzing images. You can also talk to me about something serious or just have a fun conversation. Whatever is on your mind, I'm here for you.\n\nWhat can I do for you?",
    },
  ]);
  const [input, setInput] = useState("");
  const [showCamera, setShowCamera] = useState(false);
  const [showAudioRecorder, setShowAudioRecorder] = useState(false);
  const [capturedImage, setCapturedImage] = useState(null);
  const messagesEndRef = useRef(null);

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (input.trim() === "" && !capturedImage) return;
    
    const newMessage = {
      isBot: false, 
      content: input,
      image: capturedImage
    };
    
    setMessages([...messages, newMessage]);
    setInput("");
    setCapturedImage(null);
    
    // In a real app, you would call an API here to get the bot's response
    setTimeout(() => {
      setMessages((prev) => [
        ...prev,
        {
          isBot: true,
          content: "This is a placeholder response. In a real application, this would be generated by an AI model.",
        },
      ]);
    }, 1000);
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  return (
    <div className="flex flex-col h-screen bg-white text-gray-800 p-6">
      {/* Chat messages area */}
      <div className="flex-1 overflow-y-auto p-4 pb-24 max-w-5xl mx-auto w-full">
        {messages.map((message, index) => (
          <div key={index} className={`flex mb-6 ${message.isBot ? "" : "justify-end"}`}>
            <div className={`${message.isBot ? "max-w-full" : "max-w-full text-right bg-zinc-100 px-4 py-2 rounded-full"}`}>
              {message.image && (
                <div className="mb-2">
                  <img src={message.image} alt="User uploaded" className="max-w-xs rounded" />
                </div>
              )}
              <p className="whitespace-pre-wrap">{message.content}</p>
            </div>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>

      {/* Camera overlay */}
      {showCamera && (
        <CameraCapture
          onCapture={(imageData) => {
            setCapturedImage(imageData);
            setShowCamera(false);
          }}
          onClose={() => setShowCamera(false)}
        />
      )}

      {/* Audio recorder overlay */}
      {showAudioRecorder && (
        <div className="absolute bottom-24 left-0 right-0 flex justify-center">
          <div className="bg-white p-4 rounded-lg shadow-lg">
            <AudioRecorderWithVisualizer 
              className="mb-2"
            />
            <Button 
              onClick={() => setShowAudioRecorder(false)} 
              variant="outline"
              className="w-full mt-2"
            >
              Close
            </Button>
          </div>
        </div>
      )}

      {/* Preview captured image */}
      {capturedImage && (
        <div className="absolute bottom-24 left-0 right-0 flex justify-center">
          <div className="bg-white p-2 rounded-lg shadow-lg">
            <img src={capturedImage} alt="Captured" className="h-24 rounded" />
            <button 
              onClick={() => setCapturedImage(null)} 
              className="absolute top-1 right-1 bg-gray-800 text-white rounded-full p-1 text-xs"
            >
              âœ•
            </button>
          </div>
        </div>
      )}

      {/* Input area */}
      <div className="absolute bottom-0 left-0 right-0 p-4 border-t bg-white">
        <form onSubmit={handleSendMessage} className="relative max-w-3/5 mx-auto">
          <div className="flex items-center">
            <div className="absolute left-3 flex gap-2 z-10">
              <Button
                type="button"
                variant="ghost"
                size="icon"
                className="text-gray-500 hover:text-gray-700"
                onClick={() => setShowCamera(true)}
              >
                <span className="sr-only">Take photo</span>
                <Camera className="h-5 w-5" />
              </Button>
            </div>
            
            <Input
              type="text"
              placeholder="Ask Aya Vision"
              className="w-full pr-24 pl-12 py-6 border rounded-full bg-white"
              value={input}
              onChange={(e) => setInput(e.target.value)}
            />
            
            <div className="absolute right-3 top-1/2 transform -translate-y-1/2 flex gap-2">
              <Button
                type="button"
                variant="ghost"
                size="icon"
                className="text-gray-500 hover:text-gray-700"
                onClick={() => setShowAudioRecorder(!showAudioRecorder)}
              >
                <span className="sr-only">Use microphone</span>
                <Mic className="h-5 w-5" />
              </Button>
              <Button
                type="submit"
                variant="ghost"
                size="icon"
                className="text-gray-500 hover:text-gray-700"
              >
                <span className="sr-only">Send</span>
                <svg className="h-5 w-5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                </svg>
              </Button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
}